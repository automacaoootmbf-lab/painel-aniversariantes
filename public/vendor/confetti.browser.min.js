/*! Canvas Confetti v1.9.3 | MIT License | https://www.kirilv.com/canvas-confetti */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.confetti = factory());
})(this, (function () { 'use strict';

  function isFunction(f) {
    return typeof f === 'function';
  }

  function noop() {}

  function defaultSettings() {
    return {
      angle: 90,
      spread: 45,
      startVelocity: 45,
      elementCount: 50,
      decay: 0.9,
      ticks: 200,
      zIndex: 200,
      width: 800,
      height: 600,
      perspective: '',
      disableForReducedMotion: false,
      colors: ['#26ccff', '#a25afd', '#ff5e7e', '#88ff5a', '#fcf42b', '#ffa62d', '#ff36ff']
    };
  }

  function toDecimalPlaces(num, places) {
    return Number(num.toFixed(places));
  }

  function randomInRange(min, max) {
    return Math.random() * (max - min) + min;
  }

  function percentChance(pct) {
    return Math.random() < pct;
  }

  function getElementOffset(el) {
    var rect = el.getBoundingClientRect();
    return {
      left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft),
      top: rect.top + (window.pageYOffset || document.documentElement.scrollTop)
    };
  }

  function createCanvas(parent, zIndex, width, height, positionStyle) {
    var canvas = document.createElement('canvas');
    canvas.width = width;
    canvas.height = height;
    canvas.style.position = positionStyle || 'fixed';
    canvas.style.left = 0;
    canvas.style.top = 0;
    canvas.style.pointerEvents = 'none';
    canvas.style.zIndex = zIndex;
    parent.appendChild(canvas);
    return canvas;
  }

  function createAnimationFrame() {
    var raf = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (cb) {
      return setTimeout(cb, 16);
    });
    return raf;
  }

  function cancelAnimationFrameFn(id) {
    var caf = (window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || function (id) {
      clearTimeout(id);
    });
    return caf(id);
  }

  function toDecimal(n) {
    return Math.round(n * 1000) / 1000;
  }

  function defaultOptions(opts) {
    var defaults = defaultSettings();
    var result = {};
    for (var key in defaults) result[key] = defaults[key];
    for (var key$1 in opts) result[key$1] = opts[key$1];
    return result;
  }

  function makeParticle(ctx, x, y, dx, dy, color, shape, tiltAngle, tiltSin, tiltCos, wobble, wobbleSpeed, wobbleX, wobbleY, tick, totalTicks, decay, gravity, scalar) {
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy,
      color: color,
      shape: shape,
      tiltAngle: tiltAngle,
      tiltSin: tiltSin,
      tiltCos: tiltCos,
      wobble: wobble,
      wobbleSpeed: wobbleSpeed,
      wobbleX: wobbleX,
      wobbleY: wobbleY,
      tick: tick,
      totalTicks: totalTicks,
      decay: decay,
      gravity: gravity,
      scalar: scalar,
      random: Math.random()
    };
  }

  function drawParticle(ctx, particle) {
    ctx.beginPath();
    var width = Math.max(2, 10 * particle.scalar);
    var height = Math.max(2, 6 * particle.scalar);
    ctx.fillStyle = particle.color;
    ctx.save();
    ctx.translate(particle.x, particle.y);
    ctx.rotate(particle.tiltAngle);
    ctx.fillRect(-width / 2, -height / 2, width, height);
    ctx.restore();
  }

  function updateParticle(particle, progressRatio) {
    particle.x += particle.dx + Math.cos(particle.wobble) * 0.5;
    particle.y += particle.dy + Math.sin(particle.wobble) * 0.5 + particle.gravity;
    particle.wobble += particle.wobbleSpeed;
    particle.dx *= particle.decay;
    particle.dy *= particle.decay;
    particle.scalar *= 0.998;
    particle.tiltAngle += 0.1;
    particle.tick += 1;
    return particle;
  }

  function makeParticles(ctx, x, y, angle, spread, startVelocity, elementCount, colors, shapes, decay, ticks, gravity) {
    var particles = [];
    for (var i = 0; i < elementCount; i++) {
      var rad = (angle + (Math.random() - 0.5) * spread) * (Math.PI / 180);
      var vx = Math.cos(rad) * startVelocity * (Math.random() + 0.5);
      var vy = Math.sin(rad) * startVelocity * (Math.random() + 0.5) * -1;
      var color = colors[i % colors.length];
      var shape = shapes && shapes.length ? shapes[i % shapes.length] : 'square';
      var wobble = Math.random() * 10;
      var wobbleSpeed = 0.1 + Math.random() * 0.3;
      var particle = makeParticle(ctx, x, y, vx, vy, color, shape, 0, 0, 0, wobble, wobbleSpeed, 0, 0, 0, 0, decay, gravity, 1);
      particles.push(particle);
    }
    return particles;
  }

  function confettiFactory(root, opts) {
    opts = defaultOptions(opts || {});
    var canvas = createCanvas(root, opts.zIndex || 200, opts.width || window.innerWidth, opts.height || window.innerHeight, opts.positionStyle);
    var ctx = canvas.getContext('2d');
    var particles = [];
    var rafHandle = null;
    var running = true;
    var totalTicks = opts.ticks || 200;
    var gravity = opts.gravity || 0.5;
    var decay = opts.decay || 0.9;

    function frame() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      for (var i = particles.length - 1; i >= 0; i--) {
        var p = particles[i];
        drawParticle(ctx, p);
        updateParticle(p, i / particles.length);
        if (p.tick > p.totalTicks || p.y > canvas.height + 100) {
          particles.splice(i, 1);
        }
      }
      if (particles.length > 0) {
        rafHandle = requestAnimationFrame(frame);
      } else {
        try { root.removeChild(canvas); } catch (e) {}
      }
    }

    return function (msg) {
      var x = (msg && msg.origin && msg.origin.x) || canvas.width / 2;
      var y = (msg && msg.origin && msg.origin.y) || canvas.height / 3;
      var angle = msg.angle || opts.angle;
      var spread = msg.spread || opts.spread;
      var startVelocity = msg.startVelocity || opts.startVelocity;
      var elementCount = msg.elementCount || opts.elementCount;
      var colors = msg.colors || opts.colors;
      var shapes = msg.shapes || null;
      var newParticles = makeParticles(ctx, x, y, angle, spread, startVelocity, elementCount, colors, shapes, decay, totalTicks, gravity);
      particles = particles.concat(newParticles);
      if (!rafHandle) {
        rafHandle = requestAnimationFrame(frame);
      }
    };
  }

  var globalConfetti = (function () {
    var confetti = null;
    return function (opts) {
      opts = opts || {};
      var root = (opts && opts.origin && opts.origin.root) || document.body;
      if (!confetti) confetti = confettiFactory(root, opts);
      confetti(opts);
    };
  })();

  return globalConfetti;

}));
